{"version":3,"file":"component---src-templates-blog-post-tsx-6f421d9f42937f360f60.js","mappings":"oQAGe,SAASA,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAC1BC,GAAeC,EAAAA,EAAAA,aACfC,GAAQC,EAAAA,EAAAA,KAmBd,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UACpCC,EAAa,CACjBC,IAAK,gCACLC,KAAM,0BACN,aAAc,QACdC,MAAO,UACPT,MAAM,UAAWA,EAAMU,IACvBC,YAAa,YACbC,MAAO,QAETC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBL,EAAgB,KAAXM,EAAW,KACnDb,EAAWc,aAAaP,EAAKM,EAD/B,IAGAlB,EAAaoB,QAAQC,YAAYhB,EAd1B,GAeN,CAACN,EAAUG,KAEPoB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,IAAKvB,GAClB,C,sQCuDYwB,EAAO,SAAC,GAAuC,IAAbC,EAAa,EAArCC,KAAQC,eAC7B,OACEL,EAAAA,EAAAA,IAACM,EAAAA,EAAD,CACEC,MAAOJ,EAAKK,YAAYD,MACxBE,YAAaN,EAAKK,YAAYC,aAAeN,EAAKO,QAASC,cAAUC,EAAWC,UAAMD,GAJrF,EAQP,EA/EyB,SAAC,GAAuE,UAArER,KAAQU,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,KAAsBb,EAAuB,EAAvCE,eAAwB5B,EAAe,EAAfA,SAC1EwC,GAAY,UAAAD,EAAKE,oBAAL,eAAmBX,QAAnB,QACZ3B,GAAQC,EAAAA,EAAAA,KAEd,OACEmB,EAAAA,EAAAA,IAACmB,EAAAA,EAAD,CAAQ1C,SAAUA,EAAU8B,MAAOU,IACjCjB,EAAAA,EAAAA,IAAAA,UAAAA,CACEoB,UAAW,eACXC,WAAS,EACTC,SAAS,8BAETtB,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAAA,KAAAA,CAAIuB,IAAG,GAOJpB,EAAKK,YAAYD,QAEpBP,EAAAA,EAAAA,IAAAA,IAAAA,CAAGuB,KAAKA,EAAAA,EAAAA,IAAF,8CAGI3C,EAAM4C,OAAOC,QAAQ,IAHzB,eAIFtB,EAAKK,YAAYkB,QAEvB1B,EAAAA,EAAAA,IAAAA,UAAAA,CACE2B,wBAAyB,CAAEC,OAAQzB,EAAK0B,MACxCC,SAAS,cACTP,IAAG,KAMLvB,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAC+B,EAAAA,EAAD,OACA/B,EAAAA,EAAAA,IAAAA,MAAAA,CAAKoB,UAAU,kBACbpB,EAAAA,EAAAA,IAAAA,KAAAA,CACEgC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,KAGXrC,EAAAA,EAAAA,IAAAA,KAAAA,KACGc,IACCd,EAAAA,EAAAA,IAACsC,EAAAA,EAAD,CAAMC,GAAIzB,EAAS0B,OAAOC,KAAMC,IAAI,QAApC,KACK5B,EAASN,YAAYD,SAI9BP,EAAAA,EAAAA,IAAAA,KAAAA,KACGe,IACCf,EAAAA,EAAAA,IAACsC,EAAAA,EAAD,CAAMC,GAAIxB,EAAKyB,OAAOC,KAAMC,IAAI,QAC7B3B,EAAKP,YAAYD,MADpB,UAORP,EAAAA,EAAAA,IAACxB,EAAD,CAASC,SAAUA,MAhE7B,C","sources":["webpack://gatsby-starter-blog/./src/components/comment.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import React, { createRef, useEffect } from \"react\";\nimport { useTheme } from \"@emotion/react\";\n\nexport default function Comment({ location }) {\n  const containerRef = createRef<HTMLDivElement>();\n  const theme = useTheme();\n\n  useEffect(() => {\n    const utterances = document.createElement(\"script\");\n    const attributes = {\n      src: \"https://utteranc.es/client.js\",\n      repo: \"heyask/heyask.github.io\",\n      \"issue-term\": \"title\",\n      label: \"comment\",\n      theme: `github-${theme.key}`,\n      crossOrigin: \"anonymous\",\n      async: \"true\"\n    };\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n    containerRef.current.appendChild(utterances);\n  }, [location, theme]);\n\n  return <div ref={containerRef} />;\n}","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Comment from \"../components/comment\";\nimport { css, useTheme } from \"@emotion/react\";\nimport Link from \"../components/link\";\n\nconst BlogPostTemplate = ({ data: { previous, next, site, markdownRemark: post }, location }) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  const theme = useTheme();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className={`blog-post ` + css`max-width: 760px; margin: 0 auto;`}\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 css={css`\n            max-width: 720px;\n            margin: 0 auto;\n            padding: 120px 0 24px 0;\n            text-align: center;\n            font-size: 30pt;\n          `}>\n            {post.frontmatter.title}\n          </h1>\n          <p css={css`\n           padding:0 0 60px 0;\n           text-align: center;\n           color: ${theme.colors.default[10]}\n          `}>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n          css={css`\n            max-width: 720px;\n            margin: 0 auto;\n            padding: 0 24px; \n          `}\n        />\n        <footer>\n          <Bio />\n          <nav className=\"blog-post-nav\">\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n          <Comment location={location} />\n        </footer>\n      </article>\n    </Layout>\n  );\n};\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt} children={undefined} lang={undefined} />\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug(\n        $id: String!\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"YYYY년 MM월 DD일\")\n                description\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`;\n"],"names":["Comment","location","containerRef","createRef","theme","useTheme","useEffect","utterances","document","createElement","attributes","src","repo","label","key","crossOrigin","async","Object","entries","forEach","value","setAttribute","current","appendChild","___EmotionJSX","ref","Head","post","data","markdownRemark","Seo","title","frontmatter","description","excerpt","children","undefined","lang","previous","next","site","siteTitle","siteMetadata","Layout","className","itemScope","itemType","css","colors","default","date","dangerouslySetInnerHTML","__html","html","itemProp","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}