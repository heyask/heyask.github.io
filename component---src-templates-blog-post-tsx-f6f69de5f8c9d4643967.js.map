{"version":3,"file":"component---src-templates-blog-post-tsx-f6f69de5f8c9d4643967.js","mappings":"0PAEe,SAASA,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,aAmBrB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UAU1CC,OAAOC,QATY,CACjBC,IAAK,gCACLC,KAAM,0BACN,aAAc,QACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,SAEkBC,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDb,EAAWc,aAAaF,EAAKC,EAD/B,IAGAhB,EAAakB,QAAQC,YAAYhB,EAd1B,GAeN,IAEIiB,EAAAA,cAAAA,MAAAA,CAAKC,GAAG,UAAUC,IAAKtB,GAC/B,CCfD,IAsDauB,EAAO,SAAC,GAAmC,IAAXC,EAAW,EAAlCC,KAAOC,eAC3B,OACIN,EAAAA,cAACO,EAAAA,EAAD,CACIC,MAAOJ,EAAKK,YAAYD,MACxBE,YAAaN,EAAKK,YAAYC,aAAeN,EAAKO,QAASC,cAAUC,EAAWC,UAAMD,GAJzF,EAQP,EA9DyB,SAAC,GAAoE,UAAnER,KAAOU,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,KAAsBb,EAAsB,EAAtCE,eAAuBY,EAAe,EAAfA,SACvEC,GAAY,UAAAF,EAAKG,oBAAL,eAAmBZ,QAAnB,QAElB,OACIR,EAAAA,cAACqB,EAAAA,EAAD,CAAQH,SAAUA,EAAUV,MAAOW,GACjCnB,EAAAA,cAAAA,UAAAA,CACIsB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAEXxB,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIyB,SAAS,YAAYrB,EAAKK,YAAYD,OAC1CR,EAAAA,cAAAA,IAAAA,KAAII,EAAKK,YAAYiB,OAEvB1B,EAAAA,cAAAA,UAAAA,CACI2B,wBAAyB,CAACC,OAAQxB,EAAKyB,MACvCJ,SAAS,gBAEbzB,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAC8B,EAAAA,EAAD,MACA9B,EAAAA,cAACrB,EAAD,QAGJqB,EAAAA,cAAAA,MAAAA,CAAKsB,UAAU,iBACbtB,EAAAA,cAAAA,KAAAA,CACI+B,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGbpC,EAAAA,cAAAA,KAAAA,KACGe,GACGf,EAAAA,cAACqC,EAAAA,KAAD,CAAMC,GAAIvB,EAASwB,OAAOC,KAAMC,IAAI,QAApC,KACK1B,EAASN,YAAYD,QAIhCR,EAAAA,cAAAA,KAAAA,KACGgB,GACGhB,EAAAA,cAACqC,EAAAA,KAAD,CAAMC,GAAItB,EAAKuB,OAAOC,KAAMC,IAAI,QAC7BzB,EAAKP,YAAYD,MADpB,SA3ClB,C","sources":["webpack://gatsby-starter-blog/./src/components/comment.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import React, { createRef, useEffect } from \"react\"\n\nexport default function Comment() {\n  const containerRef = createRef()\n\n  useEffect(() => {\n    const utterances = document.createElement(\"script\")\n    const attributes = {\n      src: \"https://utteranc.es/client.js\",\n      repo: \"heyask/heyask.github.io\",\n      \"issue-term\": \"title\",\n      label: \"comment\",\n      theme: \"github-light\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n    containerRef.current.appendChild(utterances)\n  }, [])\n\n  return <div id=\"comment\" ref={containerRef} />\n}","import * as React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Comment from \"../components/comment\";\n\nconst BlogPostTemplate = ({data: {previous, next, site, markdownRemark: post}, location,}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n      <Layout location={location} title={siteTitle}>\n        <article\n            className=\"blog-post\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n            <p>{post.frontmatter.date}</p>\n          </header>\n          <section\n              dangerouslySetInnerHTML={{__html: post.html}}\n              itemProp=\"articleBody\"\n          />\n          <hr/>\n          <footer>\n            <Bio/>\n            <Comment/>\n          </footer>\n        </article>\n        <nav className=\"blog-post-nav\">\n          <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n          >\n            <li>\n              {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n  )\n}\n\nexport const Head = ({data: {markdownRemark: post}}) => {\n  return (\n      <Seo\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt} children={undefined} lang={undefined}      />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug(\n        $id: String!\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                description\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`\n"],"names":["Comment","containerRef","createRef","useEffect","utterances","document","createElement","Object","entries","src","repo","label","theme","crossOrigin","async","forEach","key","value","setAttribute","current","appendChild","React","id","ref","Head","post","data","markdownRemark","Seo","title","frontmatter","description","excerpt","children","undefined","lang","previous","next","site","location","siteTitle","siteMetadata","Layout","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}