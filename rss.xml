<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[기술블로그]]></description><link>https://heyask.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 24 Sep 2022 12:57:26 GMT</lastBuildDate><item><title><![CDATA[엣지케이스(Edge Case), 코너케이스(Corner Case)]]></title><description><![CDATA[엣지케이스(Edge Case) - 경계 케이스(Boundary Case…]]></description><link>https://heyask.github.io/2022-09-17-EdgeCase-CornerCase/</link><guid isPermaLink="false">https://heyask.github.io/2022-09-17-EdgeCase-CornerCase/</guid><pubDate>Sat, 17 Sep 2022 04:31:12 GMT</pubDate><content:encoded>&lt;h4&gt;&lt;strong&gt;엣지케이스(Edge Case) - 경계 케이스(Boundary Case)로도 알려짐&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;엣지 케이스는 극단적인 작동 매개변수에서만 발생하는 문제 또는 상황입니다. 예를 들어, 스테레오 스피커는 다른 극단적인 설정이나 조건이 없는 경우에도 최대 볼륨으로 재생할 때 오디오를 눈에 띄게 왜곡할 수 있습니다. 극단적인 경우는 예상할 수도 있고 예상하지 못할 수도 있습니다. — Wiki&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;소프트웨어 관점에서 예를 들면 주어진 배열의 길이가 0이거나 1인경우, 배열이 너무 길어 중첩 for문을 사용했을때 O(N²)의 시간 복잡도를 가져 너무 긴 시간이 걸리는 경우 등 다양한 상황이 있을 수 있다.&lt;/p&gt;
&lt;p&gt;엣지케이스의 예로는 아래의 상황들이 있을 수 있다고 한다.&lt;/p&gt;
&lt;p&gt;1. 비어있거나 하나만 있는 케이스&lt;br&gt;
2. 첫번째 혹은 마지막 케이스&lt;br&gt;
3. 크기가 굉장히 큰 케이스&lt;br&gt;
4. 범위가 굉장히 넓은 케이스&lt;br&gt;
5. 양수만 있는, 혹은 음수만 있는 케이스&lt;br&gt;
6. 배열 사이즈가 클 때 전체 반복을 두번 이상 하면 타임아웃에 걸릴 수 도 있다고 생각하자.&lt;br&gt;
7. overflow 가 나는 케이스 (int 대신 long 사용)&lt;br&gt;
8. 같은 값이 들어가는 케이스&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;코너 케이스(Corner Case)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;여러 가지 변수와 환경의 복합적인 상호작용으로 발생하는 문제다. 날씨가 너무 습해 스피커에 문제가 생기는 등의 경우이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[안드로이드 스튜디오 무선 디버깅(WiFi) 하기]]></title><description><![CDATA[안드로이드 스튜디오에서 기기와 케이블을 연결하지 않고 디버깅을 할 수 있는 방법이 있습니다. adb connect를 사용하는 방법입니다. undefined 먼저, 무선 디버깅을 위해 최초 한번은 기기를 usb에 연결해야 합니다. > adb tcpip…]]></description><link>https://heyask.github.io/2020-06-01-Android-Studio-WiFi-Debugging/</link><guid isPermaLink="false">https://heyask.github.io/2020-06-01-Android-Studio-WiFi-Debugging/</guid><pubDate>Mon, 01 Jun 2020 01:37:33 GMT</pubDate><content:encoded>&lt;p&gt;안드로이드 스튜디오에서 기기와 케이블을 연결하지 않고 디버깅을 할 수 있는 방법이 있습니다. &lt;strong&gt;adb connect&lt;/strong&gt;를 사용하는 방법입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;p&gt;먼저, 무선 디버깅을 위해 최초 한번은 기기를 usb에 연결해야 합니다.&lt;/p&gt;
&lt;p&gt;&gt; adb tcpip 5555&lt;/p&gt;
&lt;p&gt;tcp 프로토콜로 기기에 접속합니다. &lt;strong&gt;restarting in TCP mode port: 5555&lt;/strong&gt; 메시지가 나오면 성공한 것 입니다.&lt;/p&gt;
&lt;p&gt;이제 기기와 usb 연결을 해제해도 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그 후 기기의 네트워크 설정에 들어가서 공유기로부터 할당된 내부 아이피 주소를 확인합니다. G6의 경우 설정-&gt;일반-&gt;휴대폰정보-&gt;네트워크-&gt;IP 주소에서 확인할 수 있네요.&lt;/p&gt;
&lt;p&gt;&gt; adb connect 192.168.0.115&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;connected to 192.168.0.115:5555&lt;/strong&gt; 메시지가 나타나면 무선 디버깅 세팅이 완료되었습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[유니티용 Plugin 만들기 : iOS편 (Swift)]]></title><description><![CDATA[이 글은 아래 버전 기준으로 작성되었습니다. Unity: 2018.4.19f Xcode: 11.4.1 (11E503a) 유니티용 iOS 플러그인은 기본적으로 Objective-C만 지원이 됩니다. 하지만 브릿지를 통해 인터페이스만 Objective-C…]]></description><link>https://heyask.github.io/2020-05-06-Unity-plugin-iOS-swift/</link><guid isPermaLink="false">https://heyask.github.io/2020-05-06-Unity-plugin-iOS-swift/</guid><pubDate>Wed, 13 May 2020 07:11:13 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;이 글은 아래 버전 기준으로 작성되었습니다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Unity: 2018.4.19f&lt;/li&gt;
&lt;li&gt;Xcode: 11.4.1 (11E503a)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;유니티용 iOS 플러그인은 기본적으로 Objective-C만 지원이 됩니다. 하지만 브릿지를 통해 인터페이스만 Objective-C로 작성하고 Swift로 실구현내용을 작성하는 방식을 통해 유니티 플러그인을 만들 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;설치&lt;/h3&gt;
&lt;p&gt;유니티가 설치되어있지 않으면 먼저 설치해줍니다.&lt;/p&gt;
&lt;p&gt;유니티: &lt;a href=&quot;https://unity3d.com/get-unity/update&quot;&gt;https://unity3d.com/get-unity/update&lt;/a&gt;&lt;br&gt;
Xcode: 맥 앱스토어에서 설치할 수 있습니다.(&lt;a href=&quot;https://apps.apple.com/kr/app/xcode/id497799835?mt=12&quot;&gt;https://apps.apple.com/kr/app/xcode/id497799835?mt=12&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Workspace 생성&lt;/h3&gt;
&lt;p&gt;두개의 프로젝트를 생성할 것이므로 Xcode에서 workspace를 생성해줍니다. Xcode를 실행하고 상단 메뉴에서 File-New-Workspace를 선택하여 생성합니다.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Xcode Project 생성&lt;/h3&gt;
&lt;p&gt;마찬가지로 File-New-Project를 클릭하여 두개의 프로젝트를 생성해줍니다. 템플릿은 Framework를 선택하고 하나는 언어를 Swift로 다른 한개의 프로젝트는 Objective-C로 설정합니다.&lt;/p&gt;
&lt;p&gt;프로젝트 생성시 “Add to”와 “Group” 은 workspace로 설정합니다.&lt;/p&gt;
&lt;h4&gt;Swift 프로젝트 생성&lt;/h4&gt;
&lt;p&gt;undefinedundefinedundefined&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Objective-C Bridge 프로젝트 생성&lt;/h4&gt;
&lt;p&gt;undefinedundefined&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;프로젝트 구조&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MyUnityPluginBridge&lt;/strong&gt;: Objective-C로 작성된 브리지 프로젝트. 인터페이스 역할을 합니다.&lt;br&gt;
- MyUnityPluginUnityProtocol.m: 유니티로 콜백 이벤트를 보내기 위한 프로토콜들을 모아놓은 파일입니다.&lt;br&gt;
- MyUnityPluginWrapper.mm: 유니티에서 호출할 수 있는 ios native 메소드들(MyUnityPlugin swift 프로젝트에 정의된)을 호출하는 브리지 인터페이스를 모아놓은 파일입니다. MyUnityPluginWrapper.mm 파일에는 extern “C”를 통해 함수 노출을 해야하므로 확장자를 .mm으로 변경해줍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MyUnityPlugin&lt;/strong&gt;: Swift로 작성된 실 구현 코드를 작성할 프로젝트.&lt;br&gt;
- MyUnityPluginController.swift: MyUnityPluginWrapper에서 호출되는, 실제 수행하는 코드가 담겨있는 swift 파일입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로젝트 전체 코드는 맨 아래에 Github 링크가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게 프로젝트를 생성하고 MyUnityPlugin 프로젝트를 Build하면 &lt;strong&gt;MyUnityPlugin.framework&lt;/strong&gt;파일이 생성됩니다. &lt;em&gt;(Build시 Target을 ios simulator로 하면 안됩니다!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;MyUnityPluginBridge 프로젝트를 선택하여 General-Frameworks and Libraries에 &lt;strong&gt;MyUnityPlugin.framework&lt;/strong&gt; 를 추가해줍니다.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;유니티 Project 생성&lt;/h3&gt;
&lt;p&gt;유니티 프로젝트의 구조는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;p&gt;Assets/MyUnityPlugin/&lt;strong&gt;Samples&lt;/strong&gt;: 샘플 씬과 스크립트가 들어있는 디렉토리&lt;/p&gt;
&lt;p&gt;Assets/MyUnityPlugin/Scripts/iOS/&lt;strong&gt;MyUnityPluginiOSImpl.cs&lt;/strong&gt;: MyUnityPlugin.cs에서 Android, iOS 각 플랫폼의 함수 호출을 맵핑하기 위한 Implements 클래스입니다.&lt;br&gt;
Assets/MyUnityPlugin/Scripts/&lt;strong&gt;MyUnityPlugin.cs&lt;/strong&gt;: 샘플 스크립트(즉, 이 플러그인을 사용하는 클라이언트가 싱글톤 instance에 접근하여 메소드를 호출하는 클래스입니다.&lt;/p&gt;
&lt;p&gt;Assets/Plugins/iOS/&lt;strong&gt;MyUnityPlugin.framework&lt;/strong&gt;: 아까 생성한 swift 프로젝트를 빌드하여 생성된 .framework파일 입니다. 복사하여 이 디렉토리에 붙여넣습니다.&lt;br&gt;
Assets/Plugins/iOS/&lt;strong&gt;MyUnityPluginBridge&lt;/strong&gt;: Objective-C로 작성된 브리지 프로젝트입니다. 이 프로젝트의 파일를 그대로 붙여넣습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이제 Samples 디렉토리에 있는 SampleScene을 열고 유니티 상단메뉴에서 File-Build Settings -&gt; iOS 선택 -&gt; Build를 누르면 xcode프로젝트가 생성됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;Unity Project&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot; title=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot;&gt;&lt;strong&gt;heyask/MyUnityPlugin-unity&lt;/strong&gt;&lt;br&gt;
_Contribute to heyask/MyUnityPlugin-unity development by creating an account on GitHub._github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;iOS Project&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-ios&quot; title=&quot;https://github.com/heyask/MyUnityPlugin-ios&quot;&gt;&lt;strong&gt;heyask/MyUnityPlugin-ios&lt;/strong&gt;&lt;br&gt;
_Contribute to heyask/MyUnityPlugin-ios development by creating an account on GitHub._github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-ios&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[유니티용 Plugin 만들기 : 안드로이드편 (AAR)]]></title><description><![CDATA[이 글은 아래 버전 기준으로 작성되었습니다. Unity: 2018.4.19f Android Studio: 3.6.3 JDK: OpenJDK “1.8.0_242” 유니티용 안드로이드 플러그인을 만드는 방법은 다양하게 있지만 여기서는 대표적인 AAR…]]></description><link>https://heyask.github.io/2020-05-06-Unity-plugin-Android-AAR/</link><guid isPermaLink="false">https://heyask.github.io/2020-05-06-Unity-plugin-Android-AAR/</guid><pubDate>Wed, 06 May 2020 08:30:59 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 아래 버전 기준으로 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Unity: 2018.4.19f&lt;/li&gt;
&lt;li&gt;Android Studio: 3.6.3&lt;/li&gt;
&lt;li&gt;JDK: OpenJDK “1.8.0_242”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;유니티용 안드로이드 플러그인을 만드는 방법은 다양하게 있지만 여기서는 대표적인 AAR을 사용하는 방법으로 진행하겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;설치&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;아래 링크에서 유니티와 안드로이드 스튜디오를 다운로드 및 설치해주세요&lt;/p&gt;
&lt;p&gt;유니티: &lt;a href=&quot;https://unity3d.com/get-unity/update&quot;&gt;https://unity3d.com/get-unity/update&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;안드로이드 스튜디오: &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;https://developer.android.com/studio&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;안드로이드 프로젝트 생성&lt;/h3&gt;
&lt;p&gt;먼저 안드로이드 스튜디오에서 프로젝트를 하나 생성해줍니다.&lt;/p&gt;
&lt;p&gt;Activity는 필요없으므로 No Activity를 선택하고&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;p&gt;프로젝트 이름과 Package Name, 언어 등을 설정해주세요.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;안드로이드 프로젝트 설정&lt;/h3&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;com.unity3d.player.UnityPlayer&lt;/strong&gt; 패키지 사용을 위해 Unity에 있는 &lt;strong&gt;classes.jar&lt;/strong&gt;파일을 안드로이드 플러그인 프로젝트의 &lt;strong&gt;app/libs&lt;/strong&gt; 폴더에 복사해줍니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;classes.jar&lt;/strong&gt; 파일의 경로는 Mac기준으로 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/Applications/Unity/Hub/Editor/2018.4.19f1/PlaybackEngines/AndroidPlayer/Variations/il2cpp/Release/Classes/classes.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;app 모듈의 build.gradle 파일을 수정해줍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.android.&lt;strong&gt;application&lt;/strong&gt; 을 com.android.&lt;strong&gt;library&lt;/strong&gt;로 수정합니다.&lt;/li&gt;
&lt;li&gt;applicationId, versionCode, versionName은 필요없으므로 모두 주석처리 또는 지워줍니다.&lt;/li&gt;
&lt;li&gt;dependencies 에서 libs 폴더에있는 classes.jar 파일 불러오는 부분을 implementation -&gt; compileOnly로 수정합니다.&lt;br&gt;
이는 .aar파일로 빌드할때 app/libs폴더에 복사했던 unity-classes.jar 파일을 제외하기 위함입니다. 이 파일이 포함되면 유니티에서 빌드할때 충돌이 나게 됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// apply plugin: &apos;com.android.application&apos;
apply plugin: &apos;com.android.library&apos;

android {
    ...

    defaultConfig { 
        ...

        //applicationId &quot;com.example.unityplugintest&quot;
        //versionCode 1
        //versionName &quot;1.0&quot;
    }
}

dependencies {
    ...

    // implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])
    compileOnly fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])

    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;AndroidManifest.xml 파일에서 application을 지웁니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;충돌 예방 차원에서 res/drawable, res/mipmap, res/values 등등 res/.. 하위 폴더를 다 지웁니다.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;유니티 프로젝트의 C#스크립트에서 Call 할 수 있는 메소드들이 정의된UnityPluginTestClass.java 파일을 안드로이드 프로젝트에 생성합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;우측상단의 Gradle을 클릭하여 [projectname]/Tasks/build/assemble 을 더블클릭하여 실행하면 app/build/outputs/aar/app-debug.aar 파일이 만들어집니다.&lt;/p&gt;
&lt;p&gt;undefinedundefinedundefined&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;유니티 프로젝트 설정&lt;/h3&gt;
&lt;p&gt;다음으로 유니티 프로젝트에서 해야할 작업들입니다.&lt;/p&gt;
&lt;p&gt;프로젝트 아무곳에다가 UnityPluginTest.cs 파일을 생성합니다.&lt;/p&gt;
&lt;p&gt;Assets/Plugins/Android/ 디렉토리에 아까 안드로이드 프로젝트에서 생성한 app-debug.aar 파일을 복사하여 붙여넣습니다.&lt;/p&gt;
&lt;p&gt;undefined&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이제 빌드하면 apk 파일이 생성될텐데 이 파일을 AVD나 안드로이드폰에 설치하여 테스트를 진행합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;Unity Project&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot; title=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot;&gt;&lt;strong&gt;heyask/MyUnityPlugin-unity&lt;/strong&gt;&lt;br&gt;
_Contribute to heyask/MyUnityPlugin-unity development by creating an account on GitHub._github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-unity&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Project&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-android&quot; title=&quot;https://github.com/heyask/MyUnityPlugin-android&quot;&gt;&lt;strong&gt;heyask/MyUnityPlugin-android&lt;/strong&gt;&lt;br&gt;
_Contribute to heyask/MyUnityPlugin-android development by creating an account on GitHub._github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/heyask/MyUnityPlugin-android&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dropbox가 Symbolic Link 지원을 종료하다. (feat. DuckSync)]]></title><description><![CDATA[드롭박스가 더 이상 Symbolic Link를 지원하지 않는다고 한다. https://help.dropbox.com/ko-kr/installs-integrations/sync-uploads/symlinks 사실 드롭박스에서는 Symbolic Link…]]></description><link>https://heyask.github.io/2019-10-25-Dropbox-Symbolic-Link-feat-DuckSync/</link><guid isPermaLink="false">https://heyask.github.io/2019-10-25-Dropbox-Symbolic-Link-feat-DuckSync/</guid><pubDate>Fri, 25 Oct 2019 06:23:02 GMT</pubDate><content:encoded>&lt;p&gt;드롭박스가 더 이상 Symbolic Link를 지원하지 않는다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.dropbox.com/ko-kr/installs-integrations/sync-uploads/symlinks&quot;&gt;https://help.dropbox.com/ko-kr/installs-integrations/sync-uploads/symlinks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;사실 드롭박스에서는 Symbolic Link라는 개념이 없어서 소프트링크가 존재하면 링크가 아니라 그냥 폴더로 인식한다고 한다. 따라서 드롭박스폴더 내에 실제 데이터를 담은 폴더가 있고 해당 폴더를 소프트링크로 생성하면 같은 데이터가 두개가 되고 용량을 두배로 잡아먹게 된다.&lt;/p&gt;
&lt;p&gt;장점이 될 수 도있고 단점이 될 수 도 있는데, 나는 이것을 아래와 같이 장점으로 활용했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터 폴더(A)는 드롭박스 동기화 폴더 밖 어딘가에 위치하고 있다.&lt;/li&gt;
&lt;li&gt;A를 드롭박스에 동기화 시키고 싶다.&lt;/li&gt;
&lt;li&gt;그런데 A폴더를 드롭박스 동기화 폴더에 이동시켜 넣자니 하드의 용량이 부족하다거나 기타 이유로 그렇게 하고 싶지 않다.&lt;/li&gt;
&lt;li&gt;그렇다면 소프트링크를 걸어주면 된다. 이렇게!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ln -s /path/to/original-directory /path/to/Dropbox/my-soft-link&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 나는 왜 이렇게 하고 있을까? 결론부터 말하자면 용량 때문이다. 내 맥미니는 512GB SSD를 사용한다. 충분하다고 생각하는 사람도 있겠지만 나에게는 턱없이 부족한 용량이다. 데이터 백업용으로만 4TB 하드 2개를 외장으로 사용중이기 때문이다.&lt;/p&gt;
&lt;p&gt;그리고 혹시나 하드가 뻑이나서 데이터가 다 날아가버리는 사태를 방지하기 위해 2중 백업을 하고 있다. 그런데도 불안하다. 신뢰하던 하드가 뻑나서 데이터를 다 날려버린 경험이 있기 때문에..&lt;/p&gt;
&lt;p&gt;드롭박스 유료플랜의 가장 낮은 옵션인 Plus만 하더라도 2TB라는 용량을 제공한다. 나는 현재 2TB의 15%정도 밖에 사용하지 않고있다. 사실 드롭박스를 쓰는 이유가 주로 프로젝트 파일이 어떠한 이유로 날아가버리는것에 대비하기 위함이기 때문에 그렇게 큰 용량이 필요하지는 않기 때문이다. 구글 드라이브처럼 100GB, 200GB 옵션도 있으면 좋겠지만 드롭박스측에서 운영 비용상의 이유로 그렇게 하지 못한다고 한다. 버전 관리가 좋기로 유명한 갓드롭박스이니 괜찮다.&lt;/p&gt;
&lt;p&gt;어쨋든 나는 드롭박스 동기화 폴더를 외장하드에 연결시켜놓고, 프로젝트 폴더는 수정이 자주 일어나므로 맥의 사용자폴더에 두고있다. 그리고 심볼릭링크를 사용해 프로젝트폴더를 드롭박스에 링크를 생성해놓으면 알아서 드롭박스에 동기화가 되”었”었다.&lt;/p&gt;
&lt;p&gt;이 방식의 장점은&lt;/p&gt;
&lt;p&gt;첫번째, 자주 사용하는 파일들은 SSD에 놓고 쓰므로 빠르고 자주 사용하지 않는 백업용 파일들은 외장하드에 둘 수 있다. 그럼에도 동기화는 동시에 된다.&lt;/p&gt;
&lt;p&gt;두번째, 링크만 해놓으면 드롭박스가 서버에 동기화(백업)을 해놓고 내 컴퓨터에서는 용량을 두배로 잡아먹지 않는다. 무슨 말이냐면 A드라이브에 실제 데이터폴더가 있고 B드라이브에 위치한 드롭박스 폴더안에 A드라이브의 소프트링크를 생성해놓아도 B드라이브에 해당 데이터만큼의 용량을 차지하지 않는다는것이다.&lt;/p&gt;
&lt;p&gt;아무튼 매우 좋은 기능이었는데.. 이제 옛날일이 되어버렸다.&lt;/p&gt;
&lt;p&gt;그래서 데스크톱용 동기화앱을 만들었다. 이름은 &lt;strong&gt;DuckSync&lt;/strong&gt;(오리 동기화. 아무 의미 없다..)&lt;/p&gt;
&lt;p&gt;DuckSync&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aivesoft/DuckSync&quot; title=&quot;https://github.com/aivesoft/DuckSync&quot;&gt;&lt;strong&gt;aivesoft/DuckSync&lt;/strong&gt;&lt;br&gt;
_A simple file sync app based on watchman, rsync. It syncs all files from A(from) directory to B(to) directory in real…_github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/aivesoft/DuckSync&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Homepage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aivesoft.com/DuckSync&quot; title=&quot;https://aivesoft.com/DuckSync&quot;&gt;&lt;strong&gt;🐥 DuckSync&lt;/strong&gt;&lt;br&gt;
_A simple file sync app based on watchman, rsync. It syncs all files from A(from) directory to B(to) directory in real…_aivesoft.com&lt;/a&gt;&lt;a href=&quot;https://aivesoft.com/DuckSync&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Download (Mac)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aivesoft/DuckSync/releases/latest/download/DuckSync.dmg&quot;&gt;https://github.com/aivesoft/DuckSync/releases/latest/download/DuckSync.dmg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;현재 맥에서만 테스트 하였고 윈도우나 리눅스에서는 확인해보지 않았다.&lt;/p&gt;
&lt;p&gt;앱 자체는 매우 단순하고 사용법도 매우 간단하다.&lt;/p&gt;
&lt;p&gt;A 디렉토리와 B 디렉토리를 설정하면 앱이 실행되는동안 A디렉토리의 파일 수정, 추가, 삭제가 일어나는지 감시(Watch)한다. 그리고 해당 이벤트가 발생하면 A디렉토리를 B디렉토리에 동기화하게 된다.&lt;/p&gt;
&lt;p&gt;심볼릭링크를 사용하였을때는 B디렉토리에 링크만 생성하면 되었으므로 용량을 차지하지 않았지만 이 앱은 실제 파일 복사를 실시간으로 하기 때문에 용량은 차지한다. 디렉토리는 하드링크가 되지 않는걸..&lt;/p&gt;
&lt;p&gt;아무튼 필요하신 분들이 있으면 한번 사용해보세요!&lt;/p&gt;</content:encoded></item></channel></rss>