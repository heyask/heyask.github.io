{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020-05-06-Unity-plugin-iOS-swift/","result":{"data":{"site":{"siteMetadata":{"title":"💻 SunRiv's log"}},"markdownRemark":{"id":"cb26b701-ee42-5b1b-af63-4441cfcc9654","excerpt":"이 글은 아래 버전 기준으로 작성되었습니다. Unity: 2018.4.19f Xcode: 11.4.1 (11E503a) 유니티용 iOS 플러그인은 기본적으로 Objective-C만 지원이 됩니다. 하지만 브릿지를 통해 인터페이스만 Objective-C로 작성하고 Swift…","html":"<blockquote>\n<p>이 글은 아래 버전 기준으로 작성되었습니다.</p>\n<p>Unity: 2018.4.19f</p>\n<p>Xcode: 11.4.1 (11E503a)</p>\n</blockquote>\n<p>유니티용 iOS 플러그인은 기본적으로 Objective-C만 지원이 됩니다. 하지만 브릿지를 통해 인터페이스만 Objective-C로 작성하고 Swift로 실구현내용을 작성하는 방식을 통해 유니티 플러그인을 만들 수 있습니다.</p>\n<h1>설치</h1>\n<p>유니티가 설치되어있지 않으면 먼저 설치해줍니다.</p>\n<p>유니티: <a href=\"https://unity3d.com/get-unity/update\">https://unity3d.com/get-unity/update</a><br>\nXcode: 맥 앱스토어에서 설치할 수 있습니다.(<a href=\"https://apps.apple.com/kr/app/xcode/id497799835?mt=12\">https://apps.apple.com/kr/app/xcode/id497799835?mt=12</a>)</p>\n<h1>Workspace 생성</h1>\n<p>두개의 프로젝트를 생성할 것이므로 Xcode에서 workspace를 생성해줍니다. Xcode를 실행하고 상단 메뉴에서 File-New-Workspace를 선택하여 생성합니다.</p>\n<p>undefined</p>\n<h2>Xcode Project 생성</h2>\n<p>마찬가지로 File-New-Project를 클릭하여 두개의 프로젝트를 생성해줍니다. 템플릿은 Framework를 선택하고 하나는 언어를 Swift로 다른 한개의 프로젝트는 Objective-C로 설정합니다.</p>\n<p>프로젝트 생성시 “Add to”와 “Group” 은 workspace로 설정합니다.</p>\n<h2>Swift 프로젝트 생성</h2>\n<p>undefinedundefinedundefined</p>\n<hr>\n<h2>Objective-C Bridge 프로젝트 생성</h2>\n<p>undefinedundefined</p>\n<hr>\n<h1>프로젝트 구조</h1>\n<p>undefined</p>\n<p><code class=\"language-text\">MyUnityPluginBridge</code> Objective-C로 작성된 브리지 프로젝트. 인터페이스 역할을 합니다.</p>\n<ul>\n<li><code class=\"language-text\">MyUnityPluginUnityProtocol.m</code> 유니티로 콜백 이벤트를 보내기 위한 프로토콜들을 모아놓은 파일입니다.</li>\n<li><code class=\"language-text\">MyUnityPluginWrapper.mm</code> 유니티에서 호출할 수 있는 ios native 메소드들(MyUnityPlugin swift 프로젝트에 정의된)을 호출하는 브리지 인터페이스를 모아놓은 파일입니다. MyUnityPluginWrapper.mm 파일에는 extern “C”를 통해 함수 노출을 해야하므로 확장자를 .mm으로 변경해줍니다.</li>\n</ul>\n<p><code class=\"language-text\">MyUnityPlugin</code>: Swift로 작성된 실 구현 코드를 작성할 프로젝트</p>\n<ul>\n<li><code class=\"language-text\">MyUnityPluginController.swift</code>: MyUnityPluginWrapper에서 호출되는, 실제 수행하는 코드가 담겨있는 swift 파일입니다.</li>\n</ul>\n<blockquote>\n<p>프로젝트 전체 코드는 맨 아래에 Github 링크가 있습니다.</p>\n</blockquote>\n<p>이렇게 프로젝트를 생성하고 MyUnityPlugin 프로젝트를 Build하면 <code class=\"language-text\">MyUnityPlugin.framework</code>파일이 생성됩니다. (Build시 Target을 ios simulator로 하면 안됩니다!)</p>\n<p><code class=\"language-text\">MyUnityPluginBridge</code> 프로젝트를 선택하여 General-Frameworks and Libraries에 <code class=\"language-text\">MyUnityPlugin.framework</code>를 추가해줍니다.</p>\n<p>undefined</p>\n<hr>\n<h1>유니티 Project 생성</h1>\n<p>유니티 프로젝트의 구조는 다음과 같습니다.</p>\n<p>undefined</p>\n<p>Assets/MyUnityPlugin/<strong>Samples</strong>: 샘플 씬과 스크립트가 들어있는 디렉토리</p>\n<p>Assets/MyUnityPlugin/Scripts/iOS/<strong>MyUnityPluginiOSImpl.cs</strong>: MyUnityPlugin.cs에서 Android, iOS 각 플랫폼의 함수 호출을 맵핑하기 위한 Implements 클래스입니다.<br>\nAssets/MyUnityPlugin/Scripts/<strong>MyUnityPlugin.cs</strong>: 샘플 스크립트(즉, 이 플러그인을 사용하는 클라이언트가 싱글톤 instance에 접근하여 메소드를 호출하는 클래스입니다.</p>\n<p>Assets/Plugins/iOS/<strong>MyUnityPlugin.framework</strong>: 아까 생성한 swift 프로젝트를 빌드하여 생성된 .framework파일 입니다. 복사하여 이 디렉토리에 붙여넣습니다.<br>\nAssets/Plugins/iOS/<strong>MyUnityPluginBridge</strong>: Objective-C로 작성된 브리지 프로젝트입니다. 이 프로젝트의 파일를 그대로 붙여넣습니다.</p>\n<hr>\n<p>이제 Samples 디렉토리에 있는 SampleScene을 열고 유니티 상단메뉴에서 File-Build Settings -> iOS 선택 -> Build를 누르면 xcode프로젝트가 생성됩니다.</p>\n<hr>\n<h1>Git</h1>\n<h2>Unity Project</h2>\n<p><a href=\"https://github.com/heyask/MyUnityPlugin-unity\">https://github.com/heyask/MyUnityPlugin-unity</a></p>\n<h2>iOS Project</h2>\n<p><a href=\"https://github.com/heyask/MyUnityPlugin-ios\">https://github.com/heyask/MyUnityPlugin-ios</a></p>","frontmatter":{"title":"유니티용 Plugin 만들기 : iOS편 (Swift)","date":"2020년 05월 13일","description":"Swift로 유니티 Plugin 만들"}},"previous":{"fields":{"slug":"/2020-05-06-Unity-plugin-Android-AAR/"},"frontmatter":{"title":"유니티용 Plugin 만들기 : 안드로이드편 (AAR)"}},"next":{"fields":{"slug":"/2020-06-01-Android-Studio-WiFi-Debugging/"},"frontmatter":{"title":"안드로이드 스튜디오 무선 디버깅(WiFi) 하기"}}},"pageContext":{"id":"cb26b701-ee42-5b1b-af63-4441cfcc9654","previousPostId":"00dd9ad7-0e9b-5834-a55e-202a4ac29477","nextPostId":"0caa5a27-7feb-576f-843a-9e0731d888b0"}},"staticQueryHashes":["2355076697","2841359383"]}