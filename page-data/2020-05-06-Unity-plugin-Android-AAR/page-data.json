{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020-05-06-Unity-plugin-Android-AAR/","result":{"data":{"site":{"siteMetadata":{"title":"💻 SunRiv's log"}},"markdownRemark":{"id":"00dd9ad7-0e9b-5834-a55e-202a4ac29477","excerpt":"이 글은 아래 버전 기준으로 작성되었습니다. Unity: 2018.4.19f Android Studio: 3.6.3 JDK: OpenJDK “1.8.0_242” 유니티용 안드로이드 플러그인을 만드는 방법은 다양하게 있지만 여기서는 대표적인 AAR…","html":"<blockquote>\n<p>이 글은 아래 버전 기준으로 작성되었습니다.</p>\n</blockquote>\n<ul>\n<li>Unity: 2018.4.19f</li>\n<li>Android Studio: 3.6.3</li>\n<li>JDK: OpenJDK “1.8.0_242”</li>\n</ul>\n<p>유니티용 안드로이드 플러그인을 만드는 방법은 다양하게 있지만 여기서는 대표적인 AAR을 사용하는 방법으로 진행하겠습니다.</p>\n<hr>\n<h3><strong>설치</strong></h3>\n<p>아래 링크에서 유니티와 안드로이드 스튜디오를 다운로드 및 설치해주세요</p>\n<p>유니티: <a href=\"https://unity3d.com/get-unity/update\">https://unity3d.com/get-unity/update</a></p>\n<p>안드로이드 스튜디오: <a href=\"https://developer.android.com/studio\">https://developer.android.com/studio</a></p>\n<hr>\n<h3>안드로이드 프로젝트 생성</h3>\n<p>먼저 안드로이드 스튜디오에서 프로젝트를 하나 생성해줍니다.</p>\n<p>Activity는 필요없으므로 No Activity를 선택하고</p>\n<p>undefined</p>\n<p>프로젝트 이름과 Package Name, 언어 등을 설정해주세요.</p>\n<p>undefined</p>\n<hr>\n<h3>안드로이드 프로젝트 설정</h3>\n<p>undefined</p>\n<p><strong>com.unity3d.player.UnityPlayer</strong> 패키지 사용을 위해 Unity에 있는 <strong>classes.jar</strong>파일을 안드로이드 플러그인 프로젝트의 <strong>app/libs</strong> 폴더에 복사해줍니다</p>\n<p><strong>classes.jar</strong> 파일의 경로는 Mac기준으로 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/Applications/Unity/Hub/Editor/2018.4.19f1/PlaybackEngines/AndroidPlayer/Variations/il2cpp/Release/Classes/classes.jar</code></pre></div>\n<hr>\n<p>app 모듈의 build.gradle 파일을 수정해줍니다.</p>\n<ul>\n<li>com.android.<strong>application</strong> 을 com.android.<strong>library</strong>로 수정합니다.</li>\n<li>applicationId, versionCode, versionName은 필요없으므로 모두 주석처리 또는 지워줍니다.</li>\n<li>dependencies 에서 libs 폴더에있는 classes.jar 파일 불러오는 부분을 implementation -> compileOnly로 수정합니다.<br>\n이는 .aar파일로 빌드할때 app/libs폴더에 복사했던 unity-classes.jar 파일을 제외하기 위함입니다. 이 파일이 포함되면 유니티에서 빌드할때 충돌이 나게 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// apply plugin: 'com.android.application'\napply plugin: 'com.android.library'\n\nandroid {\n    ...\n\n    defaultConfig { \n        ...\n\n        //applicationId \"com.example.unityplugintest\"\n        //versionCode 1\n        //versionName \"1.0\"\n    }\n}\n\ndependencies {\n    ...\n\n    // implementation fileTree(dir: 'libs', include: ['*.jar'])\n    compileOnly fileTree(dir: 'libs', include: ['*.jar'])\n\n    ...\n}</code></pre></div>\n<hr>\n<p>AndroidManifest.xml 파일에서 application을 지웁니다.</p>\n<hr>\n<p>충돌 예방 차원에서 res/drawable, res/mipmap, res/values 등등 res/.. 하위 폴더를 다 지웁니다.</p>\n<p>undefined</p>\n<hr>\n<p>유니티 프로젝트의 C#스크립트에서 Call 할 수 있는 메소드들이 정의된UnityPluginTestClass.java 파일을 안드로이드 프로젝트에 생성합니다.</p>\n<hr>\n<p>우측상단의 Gradle을 클릭하여 [projectname]/Tasks/build/assemble 을 더블클릭하여 실행하면 app/build/outputs/aar/app-debug.aar 파일이 만들어집니다.</p>\n<p>undefinedundefinedundefined</p>\n<hr>\n<h3>유니티 프로젝트 설정</h3>\n<p>다음으로 유니티 프로젝트에서 해야할 작업들입니다.</p>\n<p>프로젝트 아무곳에다가 UnityPluginTest.cs 파일을 생성합니다.</p>\n<p>Assets/Plugins/Android/ 디렉토리에 아까 안드로이드 프로젝트에서 생성한 app-debug.aar 파일을 복사하여 붙여넣습니다.</p>\n<p>undefined</p>\n<hr>\n<p>이제 빌드하면 apk 파일이 생성될텐데 이 파일을 AVD나 안드로이드폰에 설치하여 테스트를 진행합니다.</p>\n<hr>\n<h3>Git</h3>\n<p>Unity Project</p>\n<p><a href=\"https://github.com/heyask/MyUnityPlugin-unity\" title=\"https://github.com/heyask/MyUnityPlugin-unity\"><strong>heyask/MyUnityPlugin-unity</strong><br>\n_Contribute to heyask/MyUnityPlugin-unity development by creating an account on GitHub._github.com</a><a href=\"https://github.com/heyask/MyUnityPlugin-unity\"></a></p>\n<p>Android Project</p>\n<p><a href=\"https://github.com/heyask/MyUnityPlugin-android\" title=\"https://github.com/heyask/MyUnityPlugin-android\"><strong>heyask/MyUnityPlugin-android</strong><br>\n_Contribute to heyask/MyUnityPlugin-android development by creating an account on GitHub._github.com</a><a href=\"https://github.com/heyask/MyUnityPlugin-android\"></a></p>","frontmatter":{"title":"유니티용 Plugin 만들기 : 안드로이드편 (AAR)","date":"2020년 05월 06일","description":"AAR을 사용하는 방법"}},"previous":{"fields":{"slug":"/2019-10-25-Dropbox-Symbolic-Link-feat-DuckSync/"},"frontmatter":{"title":"Dropbox가 Symbolic Link 지원을 종료하다. (feat. DuckSync)"}},"next":{"fields":{"slug":"/2020-05-06-Unity-plugin-iOS-swift/"},"frontmatter":{"title":"유니티용 Plugin 만들기 : iOS편 (Swift)"}}},"pageContext":{"id":"00dd9ad7-0e9b-5834-a55e-202a4ac29477","previousPostId":"d1b05f41-693a-5f01-bf78-fadfb5938e74","nextPostId":"cb26b701-ee42-5b1b-af63-4441cfcc9654"}},"staticQueryHashes":["2355076697","2841359383"]}