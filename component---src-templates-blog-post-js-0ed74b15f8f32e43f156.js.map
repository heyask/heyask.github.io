{"version":3,"file":"component---src-templates-blog-post-js-0ed74b15f8f32e43f156.js","mappings":"2PAEe,SAASA,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,aAmBrB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UAU1CC,OAAOC,QATY,CACjBC,IAAK,gCACLC,KAAM,0BACN,aAAc,QACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,SAEkBC,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDb,EAAWc,aAAaF,EAAKC,EAC9B,IACDhB,EAAakB,QAAQC,YAAYhB,EAClC,GAAE,IAEI,uBAAKiB,GAAG,UAAUC,IAAKrB,GAC/B,CCfD,IAyDasB,EAAO,SAAC,GAAoC,IAAZC,EAAW,EAAlCC,KAAOC,eAC3B,OACI,gBAAC,IAAD,CACIC,MAAOH,EAAKI,YAAYD,MACxBE,YAAaL,EAAKI,YAAYC,aAAeL,EAAKM,SAG3D,EAED,EAlEyB,SAAC,GAGO,IAAD,MAFJL,KAAOM,EAEH,EAFGA,SAAUC,EAEb,EAFaA,KAAMC,EAEnB,EAFmBA,KAAsBT,EAEzC,EAFyBE,eAC7BQ,EACI,EADJA,SAEpBC,GAAY,UAAAF,EAAKG,oBAAL,eAAmBT,QAAnB,QAElB,OACI,gBAAC,IAAD,CAAQO,SAAUA,EAAUP,MAAOQ,GACjC,2BACIE,UAAU,YACVC,WAAS,EACTC,SAAS,6BAEX,8BACE,sBAAIC,SAAS,YAAYhB,EAAKI,YAAYD,OAC1C,yBAAIH,EAAKI,YAAYa,OAEvB,2BACIC,wBAAyB,CAACC,OAAQnB,EAAKoB,MACvCJ,SAAS,gBAEb,2BACA,8BACE,gBAAC,IAAD,MACA,gBAACxC,EAAD,QAGJ,uBAAKqC,UAAU,iBACb,sBACIQ,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGb,0BACGnB,GACG,gBAAC,EAAAoB,KAAD,CAAMC,GAAIrB,EAASsB,OAAOC,KAAMC,IAAI,QAApC,KACKxB,EAASH,YAAYD,QAIhC,0BACGK,GACG,gBAAC,EAAAmB,KAAD,CAAMC,GAAIpB,EAAKqB,OAAOC,KAAMC,IAAI,QAC7BvB,EAAKJ,YAAYD,MADpB,SASjB,C","sources":["webpack://gatsby-starter-blog/./src/components/comment.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import React, { createRef, useEffect } from \"react\"\n\nexport default function Comment() {\n  const containerRef = createRef()\n\n  useEffect(() => {\n    const utterances = document.createElement(\"script\")\n    const attributes = {\n      src: \"https://utteranc.es/client.js\",\n      repo: \"heyask/heyask.github.io\",\n      \"issue-term\": \"title\",\n      label: \"comment\",\n      theme: \"github-light\",\n      crossOrigin: \"anonymous\",\n      async: \"true\",\n    }\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n    containerRef.current.appendChild(utterances)\n  }, [])\n\n  return <div id=\"comment\" ref={containerRef} />\n}","import * as React from \"react\"\nimport {Link, graphql} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Comment from \"../components/comment\";\n\nconst BlogPostTemplate = ({\n                            data: {previous, next, site, markdownRemark: post},\n                            location,\n                          }) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n      <Layout location={location} title={siteTitle}>\n        <article\n            className=\"blog-post\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n            <p>{post.frontmatter.date}</p>\n          </header>\n          <section\n              dangerouslySetInnerHTML={{__html: post.html}}\n              itemProp=\"articleBody\"\n          />\n          <hr/>\n          <footer>\n            <Bio/>\n            <Comment/>\n          </footer>\n        </article>\n        <nav className=\"blog-post-nav\">\n          <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n          >\n            <li>\n              {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\">\n                    ← {previous.frontmatter.title}\n                  </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                  <Link to={next.fields.slug} rel=\"next\">\n                    {next.frontmatter.title} →\n                  </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n  )\n}\n\nexport const Head = ({data: {markdownRemark: post}}) => {\n  return (\n      <Seo\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n      />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug(\n        $id: String!\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                description\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`\n"],"names":["Comment","containerRef","createRef","useEffect","utterances","document","createElement","Object","entries","src","repo","label","theme","crossOrigin","async","forEach","key","value","setAttribute","current","appendChild","id","ref","Head","post","data","markdownRemark","title","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}