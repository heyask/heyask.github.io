{"version":3,"file":"component---src-templates-blog-post-tsx-880e5163b0f44a9901c2.js","mappings":"oQAEe,SAASA,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,aAmBrB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,SAASC,cAAc,UAU1CC,OAAOC,QATY,CACjBC,IAAK,gCACLC,KAAM,0BACN,aAAc,QACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,SAEkBC,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDb,EAAWc,aAAaF,EAAKC,EAD/B,IAGAhB,EAAakB,QAAQC,YAAYhB,EAd1B,GAeN,KAEIiB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,GAAG,UAAUC,IAAKtB,GAC/B,C,wBCbD,IAsEauB,EAAO,SAAC,GAAuC,IAAbC,EAAa,EAArCC,KAAQC,eAC7B,OACEN,EAAAA,EAAAA,IAACO,EAAAA,EAAD,CACEC,MAAOJ,EAAKK,YAAYD,MACxBE,YAAaN,EAAKK,YAAYC,aAAeN,EAAKO,QAASC,cAAUC,EAAWC,UAAMD,GAJrF,EAQP,EA9EyB,SAAC,GAAuE,UAArER,KAAQU,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,KAAsBb,EAAuB,EAAvCE,eAAwBY,EAAe,EAAfA,SAC1EC,GAAY,UAAAF,EAAKG,oBAAL,eAAmBZ,QAAnB,QACZjB,GAAQ8B,EAAAA,EAAAA,KAEd,OACErB,EAAAA,EAAAA,IAACsB,EAAAA,EAAD,CAAQJ,SAAUA,EAAUV,MAAOW,IACjCnB,EAAAA,EAAAA,IAAAA,UAAAA,CACEuB,UAAW,cAAeC,EAAAA,EAAAA,IAAf,CAAAC,KAAAA,UAAAC,OAAAA,kCACXC,WAAS,EACTC,SAAS,8BAET5B,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAAA,KAAAA,CAAIuB,WAAWC,EAAAA,EAAAA,IAAF,CAAAC,KAAAA,SAAAC,OAAAA,8EAMVtB,EAAKK,YAAYD,QAEpBR,EAAAA,EAAAA,IAAAA,IAAAA,CAAGuB,WAAWC,EAAAA,EAAAA,IAAF,4DAIFjC,EAAMsC,OAAOC,QAAQ,IAJnB,eAKR1B,EAAKK,YAAYsB,QAEvB/B,EAAAA,EAAAA,IAAAA,UAAAA,CACEgC,wBAAyB,CAAEC,OAAQ7B,EAAK8B,MACxCC,SAAS,cACTZ,WAAWC,EAAAA,EAAAA,IAAF,CAAAC,KAAAA,UAAAC,OAAAA,sBAIX1B,EAAAA,EAAAA,IAAAA,KAAAA,OACAA,EAAAA,EAAAA,IAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAACoC,EAAAA,EAAD,OACApC,EAAAA,EAAAA,IAACrB,EAAD,SAGJqB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKuB,UAAU,kBACbvB,EAAAA,EAAAA,IAAAA,KAAAA,CACEqC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,KAGX1C,EAAAA,EAAAA,IAAAA,KAAAA,KACGe,IACCf,EAAAA,EAAAA,IAAC2C,EAAAA,KAAD,CAAMC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QAApC,KACKhC,EAASN,YAAYD,SAI9BR,EAAAA,EAAAA,IAAAA,KAAAA,KACGgB,IACChB,EAAAA,EAAAA,IAAC2C,EAAAA,KAAD,CAAMC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKP,YAAYD,MADpB,SA3Dd,C","sources":["webpack://gatsby-starter-blog/./src/components/comment.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import React, { createRef, useEffect } from \"react\";\n\nexport default function Comment() {\n  const containerRef = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const utterances = document.createElement(\"script\");\n    const attributes = {\n      src: \"https://utteranc.es/client.js\",\n      repo: \"heyask/heyask.github.io\",\n      \"issue-term\": \"title\",\n      label: \"comment\",\n      theme: \"github-light\",\n      crossOrigin: \"anonymous\",\n      async: \"true\"\n    };\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n    containerRef.current.appendChild(utterances);\n  }, []);\n\n  return <div id=\"comment\" ref={containerRef} />;\n}","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport Comment from \"../components/comment\";\nimport { css } from \"@emotion/css\";\nimport { useTheme } from \"@emotion/react\";\n\nconst BlogPostTemplate = ({ data: { previous, next, site, markdownRemark: post }, location }) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  const theme = useTheme();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className={`blog-post ` + css`max-width: 760px; margin: 0 auto;`}\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 className={css`\n            margin: 120px 0 24px 0;\n            padding: 16px 24px;\n            text-align: center;\n            font-size: 30pt;\n          `}>\n            {post.frontmatter.title}\n          </h1>\n          <p className={css`\n           margin:0 0 60px 0;\n           padding:0 24px;\n           text-align: center;\n           color: ${theme.colors.default[10]}\n          `}>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n          className={css`\n            padding: 0 24px; \n          `}\n        />\n        <hr />\n        <footer>\n          <Bio />\n          <Comment />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt} children={undefined} lang={undefined} />\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug(\n        $id: String!\n        $previousPostId: String\n        $nextPostId: String\n    ) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"YYYY년 MM월 DD일\")\n                description\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`;\n"],"names":["Comment","containerRef","createRef","useEffect","utterances","document","createElement","Object","entries","src","repo","label","theme","crossOrigin","async","forEach","key","value","setAttribute","current","appendChild","___EmotionJSX","id","ref","Head","post","data","markdownRemark","Seo","title","frontmatter","description","excerpt","children","undefined","lang","previous","next","site","location","siteTitle","siteMetadata","useTheme","Layout","className","css","name","styles","itemScope","itemType","colors","default","date","dangerouslySetInnerHTML","__html","html","itemProp","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}